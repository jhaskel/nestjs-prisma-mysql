generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                                                Int                  @id @default(autoincrement())
  role                                              Int                  @default(2)
  setorId                                           Int                  @default(2)
  name                                              String               @db.VarChar(128)
  email                                             String               @unique @db.VarChar(128)
  password                                          String               @db.VarChar(128)
  image                                             String               @default("0") @db.VarChar(128)
  fone                                              String               @default("0") @db.VarChar(128)
  matricula                                         String               @unique(map: "matricula") @default("0") @db.VarChar(128)
  cargo                                             String               @default("0") @db.VarChar(128)
  token                                             String               @default("0") @db.VarChar(128)
  forget                                            String               @default("0") @db.VarChar(128)
  isAtivo                                           Boolean              @default(true)
  createdAt                                         DateTime?            @default(now()) @db.Timestamp(0)
  updatedAt                                         DateTime?            @default(now()) @db.Timestamp(0)
  agenda                                            Agenda?
  documentos                                        Documento[]
  docuser                                           docuser[]
  favoritos                                         favoritos[]
  frotaabastecimento                                FrotaAbastecimento[]
  frotareservas_frotareservas_userIdTousers         FrotaReserva[]       @relation("frotareservas_userIdTousers")
  frotareservas_frotareservas_autorizationIdTousers FrotaReserva[]       @relation("frotareservas_autorizationIdTousers")
  frotaveiculos                                     FrotaVeiculos[]
  frotaveiculouser_frotaveiculouser_userIdTousers   FrotaVeiculoUser[]   @relation("frotaveiculouser_userIdTousers")
  frotaviagems                                      FrotaViagem[]
  messages_messages_remetenteTousers                messages[]           @relation("messages_remetenteTousers")
  messages_messages_destinatarioTousers             messages[]           @relation("messages_destinatarioTousers")
  secretario                                        Setor[]              @relation("setores_secretarioIdTousers")
  responsavel                                       Setor[]              @relation("setores_responsavelIdTousers")
  usercargos                                        UserCargo[]
  setores                                           Setor                @relation("users_setorIdTosetores", fields: [setorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_users_setores")

  @@index([setorId], map: "FK_users_setores")
  @@map("users")
}

model Setor {
  id                           Int             @id @default(autoincrement())
  secretarioId                 Int?            @default(1)
  name                         String          @default("0") @db.VarChar(50)
  responsavelId                Int?            @default(1)
  email                        String?         @db.VarChar(50)
  sigla                        String?         @db.VarChar(10)
  image                        String?         @db.VarChar(250)
  documentos                   Documento[]
  frotaveiculos                FrotaVeiculos[]
  sector_secreatario           User?           @relation("setores_secretarioIdTousers", fields: [secretarioId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_setores_users")
  setor_responsavel            User?           @relation("setores_responsavelIdTousers", fields: [responsavelId], references: [id], onDelete: Cascade, map: "FK_setores_users_2")
  tipos                        Tipo[]
  users_users_setorIdTosetores User[]          @relation("users_setorIdTosetores")

  @@index([secretarioId], map: "FK_setores_users")
  @@index([responsavelId], map: "responsavelId")
  @@map("setores")
}

model Config {
  id       Int      @id @default(autoincrement())
  logo     String?  @db.VarChar(250)
  name     String?  @db.VarChar(120)
  endereco String?  @db.VarChar(120)
  site     String?  @db.VarChar(120)
  fone     String?  @db.VarChar(50)
  cnpj     String?  @db.VarChar(50)
  email    String?  @db.VarChar(50)
  isAtivo  Boolean? @default(true)

  @@map("config")
}

model Documento {
  id                                      Int          @id @default(autoincrement())
  tipoId                                  Int
  userId                                  Int?
  setorId                                 Int?
  anexoId                                 Int?
  messageId                               Int?
  titulo                                  String?      @db.VarChar(50)
  status                                  String?      @db.VarChar(50)
  codigo                                  String?      @db.VarChar(50)
  ano                                     String?      @db.VarChar(50)
  isInterno                               Boolean?     @default(true)
  isAtivo                                 Boolean?     @default(true)
  createdAt                               DateTime?    @default(now()) @db.Timestamp(0)
  updatedAt                               DateTime?    @default(now()) @db.Timestamp(0)
  anexo                                   anexo[]
  declaracao                              Declaracao[]
  tipos                                   Tipo         @relation(fields: [tipoId], references: [id], onUpdate: Restrict, map: "FK__tipos")
  anexxos                                 anexo?       @relation("documentos_anexoIdToanexo", fields: [anexoId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_documentos_anexo")
  messages_documentos_messageIdTomessages messages?    @relation("documentos_messageIdTomessages", fields: [messageId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_documentos_messages")
  setores                                 Setor?       @relation(fields: [setorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_documentos_setores")
  users                                   User?        @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_documentos_users")
  docuser                                 docuser[]
  favoritos                               favoritos[]
  mess                                    messages[]

  @@index([tipoId], map: "tipoId")
  @@index([userId], map: "userId")
  @@index([setorId], map: "setorId")
  @@index([anexoId], map: "FK_documentos_anexo")
  @@index([messageId], map: "FK_documentos_messages")
  @@map("documentos")
}

model Tipo {
  id         Int         @id @default(autoincrement())
  setorId    Int
  name       String      @db.VarChar(50)
  codigo     String      @db.VarChar(50)
  image      String      @db.VarChar(350)
  documentos Documento[]
  setores    Setor       @relation(fields: [setorId], references: [id], onDelete: Cascade, map: "FK__setores")

  @@index([setorId], map: "setorId")
  @@map("tipos")
}

model UserCargo {
  id      Int      @id @default(autoincrement())
  userId  Int
  name    String   @db.VarChar(50)
  isAtivo Boolean? @default(true)
  users   User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_usercargos_users")

  @@index([userId], map: "userId")
  @@map("usercargos")
}

model Declaracao {
  id           Int        @id @default(autoincrement())
  documentoId  Int?
  destinatario String     @default("0") @db.VarChar(120)
  codigo       Int        @default(0)
  ano          Int        @default(0)
  setor        String     @default("0") @db.VarChar(250)
  assunto      String     @default("0") @db.VarChar(250)
  descricao    String     @db.Text
  assign       String?    @db.VarChar(150)
  cargo        String?    @db.VarChar(50)
  matricula    String?    @db.VarChar(50)
  documentos   Documento? @relation(fields: [documentoId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_1dc_documentos")

  @@index([documentoId], map: "documentoId")
  @@map("declaracao")
}

model docuser {
  id         Int        @id @default(autoincrement())
  docId      Int?
  userId     Int?
  createdAt  DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt  DateTime?  @default(now()) @db.Timestamp(0)
  documentos Documento? @relation(fields: [docId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_docuser_documentos")
  users      User?      @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_docuser_users")

  @@index([docId], map: "docId")
  @@index([userId], map: "userId")
}

model anexo {
  id                                   Int         @id @default(autoincrement())
  documentoId                          Int         @default(0)
  titulo                               String      @default("0") @db.VarChar(120)
  local                                String      @default("0") @db.VarChar(256)
  createdAt                            DateTime    @default(now()) @db.Timestamp(0)
  updatedAt                            DateTime    @default(now()) @db.Timestamp(0)
  documentos                           Documento   @relation(fields: [documentoId], references: [id], onDelete: Cascade, map: "FK__documentos2")
  documentos_documentos_anexoIdToanexo Documento[] @relation("documentos_anexoIdToanexo")

  @@index([documentoId], map: "documentoId")
}

model messages {
  id                                        Int         @id @default(autoincrement())
  documentoId                               Int         @default(0)
  remetente                                 Int         @default(0)
  destinatario                              Int         @default(0) @map("destinatario")
  message                                   String      @db.Text
  createdAt                                 DateTime    @default(now()) @db.Timestamp(0)
  updatedAt                                 DateTime    @default(now()) @db.Timestamp(0)
  documentos_documentos_messageIdTomessages Documento[] @relation("documentos_messageIdTomessages")
  documentos                                Documento   @relation(fields: [documentoId], references: [id], onDelete: Cascade, map: "FK__documentos")
  users_messages_remetenteTousers           User        @relation("messages_remetenteTousers", fields: [remetente], references: [id], onUpdate: Restrict, map: "FK__users")
  users_messages_destinat_rioTousers        User        @relation("messages_destinatarioTousers", fields: [destinatario], references: [id], onUpdate: Restrict, map: "FK_messages_users")

  @@index([documentoId], map: "documentoId")
  @@index([remetente], map: "remetente")
  @@index([destinatario], map: "destinatário")
}

model favoritos {
  id          Int       @id @default(autoincrement())
  userId      Int       @default(0)
  documentoId Int       @default(0)
  documentos  Documento @relation(fields: [documentoId], references: [id], onDelete: Cascade, map: "FK1__documentos")
  users       User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK1__users")

  @@index([documentoId], map: "documentoId")
  @@index([userId], map: "userId")
}

model FrotaAbastecimento {
  id            Int            @id @default(autoincrement())
  userId        Int?
  veiculoId     Int?
  mes           Int?
  createdAt     DateTime?      @default(now()) @db.Timestamp(0)
  kmAt          Int?
  litros        Int?
  media         Decimal?       @db.Decimal(10, 2)
  frotaveiculos FrotaVeiculos? @relation(fields: [veiculoId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK__frotaveiculos")
  users         User?          @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK__usersfrotaveiculos")

  @@index([userId], map: "userId")
  @@index([veiculoId], map: "veiculoId")
  @@map("frotaabastecimento")
}

model FrotaViagem {
  id            Int            @id @default(autoincrement())
  veiculoId     Int?
  userId        Int?
  reservaId     Int?
  createdAt     DateTime?      @default(now()) @db.Timestamp(0)
  finalAt       DateTime?      @db.Timestamp(0)
  isAtivo       Boolean?       @default(true)
  isAtiva       Boolean?       @default(true)
  kmInicial     Int?
  kmFinal       Int?
  destino       String?        @db.VarChar(250)
  mes           Int?
  motivo        String?        @db.Text
  frotareservas FrotaReserva?  @relation(fields: [reservaId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_frotaviagem_frotareserva")
  users         User?          @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_frotaviagem_users")
  frotaveiculos FrotaVeiculos? @relation(fields: [veiculoId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_frotaviagem_veiculos")

  @@index([reservaId], map: "reservaId")
  @@index([userId], map: "userId")
  @@index([veiculoId], map: "veiculoId")
  @@map("frotaviagem")
}

model FrotaReserva {
  id             Int            @id @default(autoincrement())
  userId         Int?
  autorizationId Int?
  veiculoId      Int?
  destino        String?        @db.VarChar(250)
  motivo         String?        @db.Text
  status         String?        @db.VarChar(100)
  reservedTo     DateTime?      @db.Timestamp(0)
  createdAt      DateTime?      @default(now()) @db.Timestamp(0)
  modifiedAt     DateTime?      @default(now()) @db.Timestamp(0)
  isAtivo        Boolean?       @default(true)
  users          User?          @relation("frotareservas_userIdTousers", fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_frotareserva_users")
  frotaveiculos  FrotaVeiculos? @relation(fields: [veiculoId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_frotareserva_veiculos")
  autorization   User?          @relation("frotareservas_autorizationIdTousers", fields: [autorizationId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_frotareservas_autorization_users")
  frotaviagems   FrotaViagem[]

  @@index([autorizationId], map: "autorizationId")
  @@index([userId], map: "userId")
  @@index([veiculoId], map: "veiculoId")
  @@map("frotareservas")
}

model FrotaVeiculos {
  id                 Int                  @id @default(autoincrement())
  setorId            Int?
  responsavelId      Int?
  name               String?              @db.VarChar(10)
  placa              String?              @db.VarChar(10)
  km                 Int?
  image              String?              @db.VarChar(250)
  isViagem           Boolean?             @default(false)
  isAtivo            Boolean?             @default(true)
  frotaabastecimento FrotaAbastecimento[]
  frotareservas      FrotaReserva[]
  setores            Setor?               @relation(fields: [setorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_frotaveiculos_setores")
  responsavel        User?                @relation(fields: [responsavelId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_frotaveiculos_users")
  frotaveiculouser   FrotaVeiculoUser[]
  frotaviagems       FrotaViagem[]

  @@index([setorId], map: "setorId")
  @@index([responsavelId], map: "responsavelId")
  @@map("frotaveiculos")
}

model FrotaVeiculoUser {
  id        Int            @id @default(autoincrement())
  userId    Int?
  veiculoId Int?
  isAtivo   Boolean?       @default(true)
  isTitular Boolean?
  veiculos  FrotaVeiculos? @relation(fields: [veiculoId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_frotaveiculouser_frotaveiculos")
  usuario   User?          @relation("frotaveiculouser_userIdTousers", fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_frotaveiculouser_users")

  @@index([userId], map: "userId")
  @@index([veiculoId], map: "veiculoId")
  @@map("frotaveiculouser")
}

model Agenda {
  id         Int       @id @default(autoincrement())
  userId     Int?      @unique(map: "userId")
  createdAt  DateTime? @default(now()) @db.Timestamp(0)
  modifiedAt DateTime? @default(now()) @db.Timestamp(0)
  isAtivo    Boolean?  @default(true)
  situacao   String?   @db.Text
  status     String?   @db.VarChar(50)
  local      String?   @db.VarChar(250)
  retornoAt  String?   @db.VarChar(250)
  users      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_agenda_users")

  @@map("agenda")
}
